# -*- coding: utf-8 -*-
"""cats.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/shelkow/649429f8e5d33f84915e8ac032a52fc5/cats.ipynb
"""

import keras
import cv2
from PIL import Image
import numpy as np
import os

data=[]
labels=[]
cats=os.listdir(r"/content/drive/MyDrive/cats_dogs/train/cats/")
for cat in cats:
  if cat!=('.ipynb_checkpoints'):
    imag=cv2.imread(r"/content/drive/MyDrive/cats_dogs/train/cats/"+cat)
    img_from_ar = Image.fromarray(imag, 'RGB')
    resized_image = img_from_ar.resize((50, 50))
    data.append(np.array(resized_image))
    labels.append(0)

animals=np.array(data)
labels=np.array(labels)

np.save("animals",animals)
np.save("labels",labels)
animals=np.load("animals.npy")
labels=np.load("labels.npy")
s=np.arange(animals.shape[0])
np.random.shuffle(s)
animals=animals[s]
labels=labels[s]
num_classes=len(np.unique(labels))
data_length=len(animals)
(x_train,x_test)=animals[(int)(0.1*data_length):],animals[:(int)(0.1*data_length)]
x_train = x_train.astype('float32')/255
x_test = x_test.astype('float32')/255
train_length=len(x_train)
print(train_length)
test_length=len(x_test)
print(test_length)
(y_train,y_test)=labels[(int)(0.1*data_length):],labels[:(int)(0.1*data_length)]
#One hot encoding
y_train=keras.utils.to_categorical(y_train,num_classes)
y_test=keras.utils.to_categorical(y_test,num_classes)

# import sequential model and all the required layers
from keras.models import Sequential
from keras.layers import Conv2D,MaxPooling2D,Dense,Flatten,Dropout
#make model
model=Sequential()
model.add(Conv2D(filters=16,kernel_size=2,padding="same",activation="relu",input_shape=(50,50,3)))
model.add(MaxPooling2D(pool_size=2))
model.add(Conv2D(filters=32,kernel_size=2,padding="same",activation="relu"))
model.add(MaxPooling2D(pool_size=2))
model.add(Conv2D(filters=64,kernel_size=2,padding="same",activation="relu"))
model.add(MaxPooling2D(pool_size=2))
model.add(Dropout(0.2))
model.add(Flatten())
model.add(Dense(500,activation="relu"))
model.add(Dropout(0.2))
model.add(Dense(4,activation="softmax"))
model.summary()
# compile the model
model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(x_train, y_train, batch_size=32, epochs=2)

#model.fit(x_train, y_train,batch_size=128,epochs=2,verbose=1)